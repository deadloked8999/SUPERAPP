const http = require('http');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API
async function testAPI(username, code, description) {
  return new Promise((resolve, reject) => {
    const url = `http://127.0.0.1:5000/api/verify-code?username=${encodeURIComponent(username)}&code=${encodeURIComponent(code)}`;
    
    console.log(`\nüîç –¢–µ—Å—Ç: ${description}`);
    console.log(`URL: ${url}`);
    
    http.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(data);
          console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
          console.log(`üìÑ –û—Ç–≤–µ—Ç:`, result);
          
          if (result.ok) {
            console.log('‚úÖ –£–°–ü–ï–•: –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç');
          } else {
            console.log('‚ùå –û–¢–ö–õ–û–ù–ï–ù–û: –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π');
          }
          
          resolve({ status: res.statusCode, data: result });
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error);
          reject(error);
        }
      });
    }).on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      reject(error);
    });
  });
}

async function main() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoint /api/verify-code\n');
  
  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è needls1
    await testAPI('needls1', '1234', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è @needls1');
    
    // –¢–µ—Å—Ç 2: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è needls1
    await testAPI('needls1', '9999', '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è @needls1');
    
    // –¢–µ—Å—Ç 3: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è Ninth_God
    await testAPI('Ninth_God', '5678', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è @Ninth_God');
    
    // –¢–µ—Å—Ç 4: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await testAPI('nonexistent', '1234', '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    
    // –¢–µ—Å—Ç 5: –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    await testAPI('', '', '–ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤');
    
    // –¢–µ—Å—Ç 6: –° —Å–∏–º–≤–æ–ª–æ–º @ –≤ username
    await testAPI('@needls1', '1234', 'Username —Å —Å–∏–º–≤–æ–ª–æ–º @');
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

main(); 
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'auth.db');

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    return;
  }
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö auth.db —É—Å–ø–µ—à–Ω–æ');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function getQuery(sql, params = []) {
  return new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => {
      if (err) {
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–∫–æ–ø–∏—è –∏–∑ db.js)
const getUserByUsername = (username) => {
  return new Promise((resolve, reject) => {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Å @, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–µ–≥–æ
    db.get(
      "SELECT id, username, role, subrole_code, telegram_chat_id, phone_number FROM users WHERE username = ? OR username = ?",
      [username, `@${username}`],
      (err, row) => {
        if (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
          reject(err);
        } else {
          resolve(row);
        }
      }
    );
  });
};

async function main() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é getUserByUsername...');
    
    const testUsernames = ['needls1', '@needls1', 'Ninth_God', '@Ninth_God', 'testbesttest1', '@testbesttest1'];
    
    for (const username of testUsernames) {
      console.log(`\nüîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${username}"`);
      const user = await getUserByUsername(username);
      if (user) {
        console.log(`  ‚úÖ –ù–ê–ô–î–ï–ù: ID=${user.id}, Role=${user.role}, Subrole=${user.subrole_code || 'NULL'}`);
      } else {
        console.log(`  ‚ùå –ù–ï –ù–ê–ô–î–ï–ù`);
      }
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
    console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è "needls1":');
    const directResult = await getQuery(
      "SELECT * FROM users WHERE username = ? OR username = ?",
      ['needls1', '@needls1']
    );
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', directResult);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    db.close((err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
      } else {
        console.log('\n‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
      }
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main(); 
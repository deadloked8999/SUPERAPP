import TelegramBot from "node-telegram-bot-api";
import sqlite3 from "sqlite3";
import { promisify } from "util";
import path from "path";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.resolve(process.cwd(), 'auth.db');
const db = new sqlite3.Database(dbPath);

// –ü—Ä–æ–º–∏—Å-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è SQLite
const dbRun = promisify(db.run.bind(db));
const dbGet = promisify(db.get.bind(db));
const dbAll = promisify(db.all.bind(db));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function initUsersTable() {
  try {
    await dbRun(`
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE,
        role TEXT,
        subrole_code TEXT,
        phone_number TEXT,
        telegram_chat_id INTEGER,
        code TEXT,
        auth_expires TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã users:", error);
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
async function getUserByUsername(username) {
  try {
    return await dbGet("SELECT * FROM users WHERE username = ? OR username = ?", [username, `@${username}`]);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    return null;
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveCodeToUser(username, code) {
  try {
    const expires = new Date(Date.now() + (10 * 60 * 1000)).toISOString(); // 10 –º–∏–Ω—É—Ç
    await dbRun(
      "UPDATE users SET code = ?, auth_expires = ? WHERE username = ? OR username = ?",
      [code, expires, username, `@${username}`]
    );
    console.log(`üíæ –ö–æ–¥ ${code} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞:", error);
    return false;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 4-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
function generateAuthCode() {
  return Math.floor(1000 + Math.random() * 9000).toString();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
function initBot() {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!token) {
    console.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
    process.exit(1);
  }

  console.log("üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞:", token ? "‚úÖ –ù–∞–π–¥–µ–Ω" : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω");

  const bot = new TelegramBot(token, { polling: true });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    const firstName = msg.from.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

    console.log(`üëã –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç ${username} (${firstName})`);

    const user = await getUserByUsername(username);

    if (user && user.role && user.subrole_code) {
      bot.sendMessage(chatId,
        `üîê –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å!\nüß≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å\n/code ‚Äì –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞`
      );
    } else {
      bot.sendMessage(chatId,
        `üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!\n–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.`
      );
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
  bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;

    console.log(`üìä –ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç ${username}`);

    const user = await getUserByUsername(username);

    if (user && user.role && user.subrole_code) {
      await bot.sendMessage(chatId,
        `üë§ –í–∞—à —Å—Ç–∞—Ç—É—Å:\n–†–æ–ª—å: ${user.role}\n–ü–æ–¥—Ä–æ–ª—å: ${user.subrole_code}\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.`
      );
    } else {
      bot.sendMessage(chatId, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /code –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
  bot.onText(/\/code/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;

    console.log(`üîë –ö–æ–º–∞–Ω–¥–∞ /code –æ—Ç ${username}`);

    const user = await getUserByUsername(username);
    if (!user) {
      bot.sendMessage(chatId, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.");
      return;
    }

    const code = generateAuthCode();
    const success = await saveCodeToUser(username, code);

    if (success) {
      bot.sendMessage(chatId, `üîë –í–∞—à –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${code}\n‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç`);
    } else {
      bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    
    const helpMessage = `
ü§ñ <b>SUPERAPP - –°–ø—Ä–∞–≤–∫–∞</b>

üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/code - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å

üéØ <b>–†–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:</b>
‚Ä¢ admin - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
‚Ä¢ hostess - –•–æ—Å—Ç–µ—Å
‚Ä¢ dancer - –¢–∞–Ω—Ü–æ–≤—â–∏—Ü–∞
‚Ä¢ promoter - –ü—Ä–æ–º–æ—É—Ç–µ—Ä
‚Ä¢ unknown - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å

üîê <b>–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /code –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
2. –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç
3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

üåê <b>–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
http://localhost:5173
    `;

    await bot.sendMessage(chatId, helpMessage, { parse_mode: 'HTML' });
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
  bot.on('error', (error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:", error);
  });

  bot.on('polling_error', (error) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ polling Telegram –±–æ—Ç–∞:", error);
  });

  console.log("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω:", new Date().toISOString());
  
  return bot;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function startBot() {
  try {
    await initUsersTable();
    const bot = initBot();
    console.log("ü§ñ Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    return bot;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:", error);
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç—ã
export { startBot, getUserByUsername, saveCodeToUser, generateAuthCode };

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  startBot();
} 